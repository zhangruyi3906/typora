#  如果您对 toml 格式不太了解，可以花三分钟时间学习一下：https://toml.io/cn/v1.0.0
#  插件使用说明：https://github.com/obgnail/typora_plugin
#  所有插件都允许单独开启/关闭，开发者鼓励您修改配置，以符合自身需求
#-------------------------------------------------------------------------
#  请勿修改【custom_plugin.default.toml】文件，请阅读本目录下的【请读我.md】文件
#  请勿修改【custom_plugin.default.toml】文件，请阅读本目录下的【请读我.md】文件
#  请勿修改【custom_plugin.default.toml】文件，请阅读本目录下的【请读我.md】文件
#-------------------------------------------------------------------------


############### kanban ###############
[kanban]
# 右键菜单中展示的名称
name = "插入kanban"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[kanban.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "kanban"
# 严格模式：不会忽略存在语法错误的代码行，直接在页面上报错（此选项用于控制所有看板，如果设置为true，那么会强制所有看板进入严格模式）
# 也可以在代码块首行添加use strict，进入严格模式（此操作用于控制单个看板）
STRICT_MODE = false
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = false
# 当描述为空时隐藏描述框
HIDE_DESC_WHEN_EMPTY = true
# 看板最大高度（单位：px）（若<0，则全部显示）
KANBAN_MAX_HEIGHT = 700
# 当看板数量太多时是否换行显示
WRAP = false
# 当鼠标位于看板时，ctrl+wheel滚动看板
CTRL_WHEEL_TO_SCROLL = true
# 看板框的颜色
# 请保持 KANBAN_COLOR 和 TASK_COLOR 数量一致，否则颜色会乱套，就不好看了
KANBAN_COLOR = ["#FFE0B2", "#DAE9F4", "#FEDCCC", "#C6E5D9", "#FFF1B9"]
# 任务框的颜色
TASK_COLOR = ["#FFFDE7", "#F8FAFF", "#FFFFF2", "#FFFCF0", "#FFFFF5"]
# 自动插入的模板
TEMPLATE = """```kanban
use strict
# Today's task

## Todo
* 语法说明(一级标题表示看板标题\\n二级标题表示看板\\n- 或 * 表示任务)
- 数量、配色(看板和任务都可以无限添加\\n\\n可以前往配置修改你喜欢的颜色)
- 严格模式(在首行添加 use strict 进入严格模式，将不会忽略语法错误)
- 当描述为空时隐藏描述框

## In-Progress
- 当任务数量太多，出现滚动条时(可以将鼠标置于看板下，使用【鼠标滚轮】滚动任务)
- 当看板数量太多，出现滚动条时(可以将鼠标置于看板下，使用【ctrl+鼠标滚轮】滚动看板)

## Completed
- NOTE(语法是开发者定义的，没有通用性，只建议用于【每日任务】临时使用)
```
"""


############### echarts ###############
[echarts]
# 右键菜单中展示的名称
name = "插入echarts"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[echarts.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "echarts"
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = true
# 渲染器: canvas/svg（参考：https://echarts.apache.org/handbook/zh/best-practices/canvas-vs-svg/）
RENDERER = "svg"
# 导出时echarts转成什么格式
# 可选: png/jpg/svg
# 注意: png/jpg只有在canvas渲染器的时候可用，svg只有在使用svg渲染器的时候可用
EXPORT_TYPE = "svg"
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```echarts
// 提供内置变量:
//   1. myChart: echarts实例
//   2. echarts: echarts模块
//   3. option:  echarts的option
//   4. this:    echarts插件实例
// 示例：https://echarts.apache.org/examples/zh/index.html#chart-type-line
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "300px", width: ""}

option = {
    xAxis: {
        data: ["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子"]
    },
    yAxis: {},
    series: [{
        name: '销量',
        type: 'bar',
        data: [5, 20, 36, 10, 10, 20]
    }]
};
myChart.on('click', params => confirm("你点击了："+params.name));
```
"""


############### chart ###############
[chart]
# 右键菜单中展示的名称
name = "插入chart"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[chart.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "chart"
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = true
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```chart
// 提供内置变量:
//   1. myChart: chart实例
//   2. Chart:   chart类
//   3. config:  chart的config
//   4. this:    chart插件实例
// API：https://chart.nodejs.cn/docs/latest/developers/api.html
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "300px", width: ""}

config = {
  type: "bar",
  data: {
    labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
    datasets: [{
      label: "# of Votes",
      data: [12, 19, 3, 5, 2, 3],
      backgroundColor: [
        "rgba(255, 99, 132, 0.2)", "rgba(54, 162, 235, 0.2)", "rgba(255, 206, 86, 0.2)",
        "rgba(75, 192, 192, 0.2)", "rgba(153, 102, 255, 0.2)", "rgba(255, 159, 64, 0.2)"
      ],
      borderColor: [
        "rgba(255, 99, 132, 1)", "rgba(54, 162, 235, 1)", "rgba(255, 206, 86, 1)",
        "rgba(75, 192, 192, 1)", "rgba(153, 102, 255, 1)", "rgba(255, 159, 64, 1)"
      ],
      borderWidth: 1
    }]
  },
  options: {
    onClick: (e) => {
      const canvasPosition = Chart.helpers.getRelativePosition(e, myChart);
      confirm(`你点击了位置： (${canvasPosition.x},${canvasPosition.y})`);
    }
  }
}
```
"""


############### calendar ###############
[calendar]
# 右键菜单中展示的名称
name = "插入calendar"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[calendar.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "calendar"
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = true
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "800px"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```calendar
// 提供内置变量:
//   1. calendar: calendar实例
//   2. Calendar: Calendar类
//   3. option:   calendar的option
//   4. this:     calendar插件实例
// example：https://nhn.github.io/tui.calendar/latest/tutorial-06-daily-view
// API: https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "800px", width: ""}

option = {
    defaultView: 'week',
    calendars: [
        { id: 'cal1', name: 'Personal', backgroundColor: '#03bd9e' },
        { id: 'cal2', name: 'Work', backgroundColor: '#00a9ff' },
    ],
};

```
"""


############### abc ###############
[abc]
# 右键菜单中展示的名称
name = "插入abc"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[abc.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "abc"
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = true
# 乐谱的可视化选项，请参考: https://paulrosen.github.io/abcjs/visual/render-abc-options.html
# 常用的配置：
#   - scale: 用于指定乐谱的缩放比例。
#   - staffwidth: 用于指定乐谱谱表的宽度。
#   - responsive: 用于指定乐谱在响应式布局中的行为，例如 "resize" 表示在窗口大小改变时重新渲染乐谱。
VISUAL_OPTIONS = { scale = 1.0, staffwidth = 400, responsive = "resize" }
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```abc
X:1
T:Twinkle, Twinkle, Little Star
M:4/4
L:1/4
K:C
G2 G2|A2 A2|B2 B2|c3 z|G2 G2|A2 A2|B2 G2|c3 z||
```
"""


############### timeline ###############
[timeline]
# 右键菜单中展示的名称
name = "插入timeline"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[timeline.config]
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "timeline"
# 默认处于交互模式（处于交互模式下，鼠标click图表并不会展开代码块）
INTERACTIVE_MODE = false
# 图表背景颜色
BACKGROUND_COLOR = "#fafafa"
# 标题的字体颜色
TITLE_COLOR = "#555"
# 左侧时间线的颜色
LINE_COLOR = "#eee"
# 时间圆点的颜色
CIRCLE_COLOR = "#999"
# 时间的字体颜色
TIME_COLOR = "#555"
# 自动插入的模板
TEMPLATE = """```timeline
# 使用一级标题表示timeline的标题

## 2022-10-1
### 使用二级标题表示时间，三到六级标题表示内容
支持简单的markdown语法
- 这是列表1
- 这是列表2
---
1. 这是有序列表1
2. 这是有效列表2

支持**加粗**，*斜体*，`代码`，~~删除~~，[链接](https://github.com/obgnail/typora_plugin)，![图片](./assets/test.jpg)
不支持代码块，因为开发者不希望代码块发生嵌套

## 2023-10-1
> 支持样式的简单嵌套：这是测试文本**这是测试文本*这是`测试文本`这是测试文本*这是测试文本**这是测试文本

## timeline的语法是开发者自定义的，谨慎使用
本timeline代码块支持导出成HTML、PDF等格式

"""


############### callouts ###############
[callouts]
# 右键菜单中展示的名称
name = "插入callouts"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[callouts.config]
# 为标题设置颜色（和left_line_color一样）
set_title_color = true
# 鼠标悬停时展示fold callout的内容
hover_to_show_fold_callout = true
# 自动插入的模板
template = "> [!NOTE]\n> this is note"
# 使用的字体。一旦修改此选项，就需要修改下面所有的icon
# 具体的icon值请参考：
#   旧版本Typora：Typora/resources/app/style/font-awesome-4.1.0/css/font-awesome.css
#   新版本Typora：Typora/resources/style/font-awesome-4.1.0/css/font-awesome.css
#   所有的icon及其对应的值：https://www.adfwebmagazine.jp/wp-content/uploads/test_v4.1.pdf
font_family = "FontAwesome"

# 所有【类型不属于list选项的callouts】都会使用默认的样式
# 默认的背景颜色
default_background_color = "#fafafa"
# 默认的左边线颜色
default_left_line_color = "#777777"
# 默认的icon
default_icon = "\\f075"

# callout的类型：
#  - type：            自定义的类型
#  - background_color：背景颜色
#  - left_line_color： 左侧竖线颜色
#  - icon：            图标
list = [
    { type = "tip", background_color = "#d8f2e5", left_line_color = "#3abd7e", icon = "\\f02c" },
    { type = "bug", background_color = "#feeed3", left_line_color = "#E0AC00", icon = "\\f188" },
    { type = "info", background_color = "#dff6dd", left_line_color = "#3abd7e", icon = "\\f05a" },
    { type = "note", background_color = "#e1d1eb", left_line_color = "#6a1b9a", icon = "\\f040" },
    { type = "quote", background_color = "#fafafa", left_line_color = "#777777", icon = "\\f10d" },
    { type = "example", background_color = "#f1edfd", left_line_color = "#777777", icon = "\\f133" },
    { type = "caution", background_color = "#fde7e9", left_line_color = "#c62828", icon = "\\f024" },
    { type = "failure", background_color = "#f4d4d4", left_line_color = "#c62828", icon = "\\f00d" },
    { type = "warning", background_color = "#feeed3", left_line_color = "#E0AC00", icon = "\\f071" },
    { type = "success", background_color = "#d8f2e5", left_line_color = "#3abd7e", icon = "\\f00c" },
    { type = "question", background_color = "#fff4ce", left_line_color = "#E0AC00", icon = "\\f128" },
    { type = "abstract", background_color = "#e5f8f8", left_line_color = "#777777", icon = "\\f00b" },
    { type = "important", background_color = "#d8e6f3", left_line_color = "#3b83c1", icon = "\\f132" },
]


############### darkMode ###############
[darkMode]
# 右键菜单中展示的名称
name = "夜间模式"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[darkMode.config]
# 快捷键
hotkey = ""
# 默认进入夜间模式
default_dark_mode = false


############### fullPathCopy ###############
[fullPathCopy]
# 右键菜单中展示的名称
name = "复制标题路径"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[fullPathCopy.config]
# 快捷键
hotkey = "ctrl+shift+y"
# 跳过空白的标题
ignore_empty_header = false
# 标题和提示之前添加空格
add_space = true
# 使用绝对路径
full_file_path = false


############### extractRangeToNewFile ###############
[extractRangeToNewFile]
# 右键菜单中展示的名称
name = "提取选区文字到新文件"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[extractRangeToNewFile.config]
# 快捷键
hotkey = ""
# 展示窗口
show_modal = true
# 自动打开新文件
auto_open = true
# 删除原文件中提取的内容
delete_content = false


############### templater ###############
[templater]
# 右键菜单中展示的名称
name = "文件模板"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[templater.config]
# 快捷键
hotkey = ""
# 自动打开新文件
auto_open = true
# 模板
# 当前支持的模板变量：
#   {{date}}：当前日期
#   {{time}}：当前时间
#   {{weekday}}：当前周几
#   {{datetime}}：当前日期时间
#   {{yesterday}}：昨天日期
#   {{tomorrow}}：明天日期
#   {{random}}：随机数
#   {{title}}：新建文件的标题
#   {{folder}}：当前文件的目录
#   {{filepath}}：新建文件的路径
#   {{range}}：当前选取的文字
#   {{uuid}}：uuid
[[templater.config.template]]
name = "标准模板"
text = """---
title: {{title}}
date: {{date}}
tags:
---

"""
[[templater.config.template]]
name = "日记"
text = """---
title: {{title}}
date: {{date}} {{weekday}}
---

"""


############### chineseSymbolAutoPairer ###############
[chineseSymbolAutoPairer]
# 右键菜单中展示的名称
name = "中文符号自动补全"
# 是否启用此自定义插件
# 注意：此插件受Typora本身配置【匹配括号和引号】的影响，如果此配置为false，那么此插件自动禁用
enable = true
# 是否在右键菜单中隐藏
hide = true
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[chineseSymbolAutoPairer.config]
# 兼容以前的行为：当用户输入【】时，不会变成【】】，而是将光标跳到】的右边
auto_skip = true
# 当光标在中间，左右两边都是成对符号，如：【|】；且用户键入Backspace时，同时删除左右两边的符号
auto_delete_pair = true
# 当框选文字时，键入中文符号，自动包裹框选文字
auto_surround_pair = true
# 自动包裹框选文字后，自动框选文字
auto_select_after_surround = true
# 需要自动补全的符号（第一项为输入符号，第二项为补全符号）
# NOTE：其实有个问题我不知道要不要修复：中文的前后引号是不一样的，如果你键入的是后引号，此时便无法正常配对补全（好像搜狗输入法就没有修复此问题）
auto_pair_symbols = [
    ["（", "）"],
    ["《", "》"],
    ["‘", "’"],
    ["“", "”"],
    ["【", "】"],
    ["「", "」"],
    ["『", "』"],
]


############### toc ###############
[toc]
# 右键菜单中展示的名称
name = "大纲"
# 是否启用此自定义插件
enable = false
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[toc.config]
# 快捷键
hotkey = ""


############### resourceOperation ###############
[resourceOperation]
# 右键菜单中展示的名称
name = "资源管理"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[resourceOperation.config]
# 本插件是通过后缀名来判断是否是资源的
# 什么后缀判定为资源
resource_suffix = [".jpg", ".jpeg", ".png", ".gif", ".svg", ".webp", ".bmp", ".mp3", ".mp4", ".image", ".jfif", ".gif!large"]
# 什么后缀判定为md文件
markdown_suffix = [".md", ".markdown", ".mdown", ".mmd", ".rmarkdown", ".mkd", ".mdwn", ".mdtxt", ".rmd", ".mdtext"]
# 是否忽略html标签<img src="example.jpg">里的资源（markdown是支持插入html的，此选项问是否要忽略img标签）
ignore_image_div = false
# 对于无后缀名的文件是否加入资源列表
append_empty_suffix_file = false
# 分析后的操作(delete和move都是危险操作，请务必查看report之后才选用)
#   1.report: 生成报告
#   2.delete: 直接删除
#   3.move  : 移动到当前文件夹
operation = "report"
# 是否在报告中使用md语法展示图片
use_md_syntax_in_report = false
# 自动打开报告文件
auto_open = true
# 打开报告文件后自动将此文件转为datatable
auto_use_datetable = true


############### scrollBookmarker ###############
[scrollBookmarker]
# 右键菜单中展示的名称
name = "书签管理器"
# 是否启用此自定义插件（此插件仅在window_tab插件启用时生效）
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[scrollBookmarker.config]
# 快捷键
hotkey = ""
# 数据持久化（作为文件保存起来）
persistence = true
# 允许【ctrl+鼠标拖拽】拖动窗口
allow_drag = true
# 当alt+click时，自动弹出窗口
auto_popup_modal = true


############### imageReviewer ###############
[imageReviewer]
# 右键菜单中展示的名称
name = "图片查看器"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[imageReviewer.config]
# 快捷键
hotkey = "ctrl+alt+i"
# 点击遮罩空白处退出
click_mask_to_exit = true
# 工具栏的位置：bottom/top
tool_position = "top"
# 进入查看器后，第一张图片是？
#   1. inViewBoxImage：     当前视图里第一张图片
#   2. closestViewBoxImage：距离当前视图中心最近的一张图片
#   3. firstImage：         整篇文档的第一张图片
# 为什么是个列表？答：优先级。
# ["inViewBoxImage", "firstImage"]：首先寻找当前视图里第一张图片，若找不到，则使用文档的第一张图片
first_image_strategies = ["inViewBoxImage", "firstImage"]
# 在工具栏左侧，展示的图片信息：
#   1. index: 第几张图片
#   2. title: 图片名称
#   3. size:  图片大小
show_message = ["index", "title", "size"]
# 每次缩放的比率
zoom_scale = 0.1
# 每次旋转的角度
rotate_scale = 10
# 每次倾斜的角度
skew_scale = 1
# 每次移动的像素
translate_scale = 10
# 轮播图片时的停留时间（单位：s）
play_second = 3
# 遮罩层的不透明度
mask_background_opacity = 0.6
# 图片最多占据80%的页面宽度
image_max_width = 80
# 图片最多占据80%的页面高度度
image_max_height = 80
# 背景模糊等级: 数值越大越模糊（为0则不模糊）
blur_level = 15

# 图片支持以下操作：
#   - dummy:          无功能
#   - close:          关闭
#   - download:       下载网络图片（若此图片是本地图片，则失效）
#   - scroll:         定位到文档
#   - play:           轮播
#   - location:       打开图片路径
#   - nextImage:      下张图
#   - previousImage:  上张图
#   - firstImage:     第一张图
#   - lastImage:      最后一张图
#   - zoomIn:         放大图片
#   - zoomOut:        缩小图片
#   - rotateLeft:     图片向左旋转
#   - rotateRight:    图片向右旋转
#   - hFlip:          水平翻转图片
#   - vFlip:          垂直翻转图片
#   - translateLeft:  向左移动
#   - translateRight: 向右移动
#   - translateUp:    向上移动
#   - translateDown:  向下移动
#   - incHSkew:       图片增大水平倾斜
#   - decHSkew:       图片减小水平倾斜
#   - incVSkew:       图片增大垂直倾斜
#   - decVSkew:       图片减小垂直倾斜
#   - originSize:     还原图片尺寸
#   - fixScreen:      图片大小适配屏幕
#   - autoSize:       图片大小在【原先尺寸】和【适配屏幕】之间切换
#   - restore:        图片恢复为最初状态

# 图片的操作提供多个入口：
#   - 工具栏按钮
#   - 鼠标左中右键（可同时配合ctrl、shift、alt等修饰按键）
#   - 快捷键

# 工具栏按钮
# 有两点需要注意：
#   1. 可选项比上面的功能多了一个info，用于提示
#   2. 若是本地图片，download按钮会自动隐藏
tool_function = ["info", "download", "play", "vFlip", "hFlip", "autoSize", "rotateRight", "scroll", "location", "close"]

# 鼠标点击图片绑定的功能
# 三项分别为左键、中键、右键
mousedown_function = ["nextImage", "close", "previousImage"]
# ctrl+鼠标图片时，绑定的功能
ctrl_mousedown_function = ["hFlip", "dummy", "vFlip"]
# shift+鼠标图片时，绑定的功能
shift_mousedown_function = ["autoSize", "dummy", "dummy"]
# alt+鼠标图片时，绑定的功能
alt_mousedown_function = ["restore", "location", "dummy"]

# 当鼠标位于图片时，上下滚动绑定的功能
# 两项分别为向上滚动、向下滚动
wheel_function = ["zoomIn", "zoomOut"]
# 当鼠标位于图片时，ctrl+上下滚动绑定的功能
ctrl_wheel_function = ["rotateRight", "rotateLeft"]
# 当鼠标位于图片时，shift+上下滚动绑定的功能
shift_wheel_function = ["incHSkew", "decHSkew"]
# 当鼠标位于图片时，alt+上下滚动绑定的功能
alt_wheel_function = ["incVSkew", "decVSkew"]

# 快捷键（仅在进入查看器后可用）
# 第一项为快捷键，第二项为绑定的功能
hotkey_function = [
    # 基础
    ["j", "nextImage"],
    ["k", "previousImage"],
    ["=", "nextImage"],
    ["-", "previousImage"],
    ["shift+j", "lastImage"],
    ["shift+k", "firstImage"],
    ["l", "scroll"],
    ["q", "close"],
    ["escape", "close"],
    [" ", "play"],
    # 翻转
    ["h", "hFlip"],
    ["v", "vFlip"],
    # 旋转
    ["r", "rotateRight"],
    ["shift+r", "rotateLeft"],
    # 移动
    ["ArrowUp", "translateUp"],
    ["ArrowDown", "translateDown"],
    ["ArrowLeft", "translateLeft"],
    ["ArrowRight", "translateRight"],
    ["w", "translateUp"],
    ["s", "translateDown"],
    ["a", "translateLeft"],
    ["d", "translateRight"],
    # 大小
    ["z", "originSize"],
    ["x", "zoomIn"],
    ["c", "zoomOut"],
    ["shift++", "zoomIn"],
    ["shift+_", "zoomOut"],
]


############### markdownLint ###############
[markdownLint]
# 右键菜单中展示的名称
name = "md格式规范检测"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[markdownLint.config]
# 快捷键
hotkey = ""
# 禁用的检测规则（参考：https://github.com/markdownlint/markdownlint/blob/main/docs/RULES.md）
disable_rules = ["MD009", "MD012", "MD013", "MD033", "MD041"]
# 将检测规则的案文翻译为中文
translate = true
# 防抖时间，在编辑后多长时间重新检测一次（单位：ms）
# 最低为1000，若<1000，则自动置为1000
debounce_interval = 1000
# 允许【ctrl+鼠标拖拽】拖动窗口
allow_drag = true
# lint通过时的提示文本
pass_text = "该文件符合规范要求"
# 弹窗的宽度
#   1. auto:  根据文字自适应
#   2. 500px: 500像素（不一定是500，可以任何正整数）
modal_width = "auto"
# 弹窗的最大高度
modal_max_height = "500px"
# 弹窗的字体大小
modal_font_size = "13px"
# 在右上角添加一个方块，用以提示lint状态（类似于idea）
# 若置为false，以下配置全部失效
use_button = true
# 方块的宽度
button_width = "12px"
# 方块的高度
button_height = "12px"
# lint通过时方块的颜色
pass_color = "#499c54"
# lint未通过时方块的颜色
error_color = "#be9117"


############### reopenClosedFiles ###############
[reopenClosedFiles]
# 右键菜单中展示的名称
name = "打开上次退出时尚未关闭的标签页"
# 是否启用此自定义插件（此插件仅在window_tab插件启用时生效）
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[reopenClosedFiles.config]
# 快捷键
hotkey = ""
# 打开Typora（打开可丢弃的无标题的标签时）自动恢复上次退出时尚未关闭的标签页
# 注意：只当双击typora.exe打开Typora时生效（因为打开特定文件时，自动恢复上次退出时尚未关闭的标签页，明显不符合用户预期）
auto_reopen_when_init = false


############### hotkeyHub ###############
[hotkeyHub]
# 右键菜单中展示的名称
name = "快捷键中心"
# 是否启用此自定义插件（此插件仅对有javascript基础的用户开放）
# 若要修改hotkeyHub的配置请前往同目录下的hoteykey.user.toml
# 注意：若置为false，那么hoteykey.toml的配置将失效
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1


############### quickButton ###############
[quickButton]
# 右键菜单中展示的名称
name = "快速按钮"
# 是否启用此自定义插件
enable = true
# 是否在右键菜单中隐藏
hide = true
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[quickButton.config]
# 按钮的尺寸
button_size = "35px"
# 按钮的圆角半径
button_border_radius = "8px"
# 按钮之间的间隔长度
button_gap = "10px"
# 按钮距离右边框的距离
position_right = "30px"
# 按钮距离底边框的距离
position_bottom = "50px"
# 如果您没有javascript基础，请不要修改以下配置
# 添加的按钮：
#   disable:    禁用此按钮
#   coordinate: 按钮坐标。往上为x轴正方向，往左为y轴正方向，从零开始计数。
#   icon:       按钮图标。填入icon css class。所有的icon及其对应的css class请参考：https://www.adfwebmagazine.jp/wp-content/uploads/test_v4.1.pdf
#   size:       图标大小
#   hint:       按钮的提示信息
#   callback:   回调函数。采用pluginName.MethodName的形式（功能就像hotkey.default.toml中的plugin参数和function参数的合体）
#                   MethodName请通过阅读源码查找。如果您不懂代码，但还是想添加按钮，有个碰运气技巧：在【右键菜单->常用插件->自定义插件下的插件】基本都是XXX.callback，其余插件基本都是XXX.call
#   evil(危险):  自定义回调函数。功能同hotkey.default.toml中的evil参数（它能用的，这里也能用）。这里的文本内容会被eval()。
#                   如果设置此参数，callback参数会失效
buttons = [
    { disable = false, coordinate = [0, 0], hint = "直达底部", size = "28px", icon = "fa fa-angle-down", callback = "go_top.goBottom" },
    { disable = false, coordinate = [1, 0], hint = "直达顶部", size = "28px", icon = "fa fa-angle-up", callback = "go_top.goTop" },
    { disable = false, coordinate = [2, 0], hint = "夜间模式", size = "18px", icon = "fa fa-adjust", callback = "darkMode.callback" },
    { disable = false, coordinate = [3, 0], hint = "混排优化", size = "17px", icon = "fa fa-align-justify", callback = "md_padding.call" },
    { disable = false, coordinate = [0, 1], hint = "思维导图", size = "22px", icon = "fa fa-code-fork", callback = "markmap.onButtonClick" },
    { disable = false, coordinate = [1, 1], hint = "图片管理", size = "17px", icon = "fa fa-image", callback = "imageReviewer.callback" },
    { disable = false, coordinate = [2, 1], hint = "书签管理", size = "17px", icon = "fa fa-bookmark", callback = "scrollBookmarker.callback" },
    { disable = false, coordinate = [3, 1], hint = "高亮搜索", size = "17px", icon = "fa fa-search", callback = "search_multi.call" },
    # evil使用示例（更多示例请参考hotkey.default.toml）：
    #   弹窗提示
    { disable = true, coordinate = [4, 0], hint = "危险操作", size = "17px", icon = "fa fa-bomb", evil = "() => window.confirm('this is message')" },
    #   在光标处插入javascript代码块
    { disable = true, coordinate = [4, 1], hint = "危险操作", size = "17px", icon = "fa fa-bomb", evil = "() => this.utils.insertText(null, '```javascript\n```', false);" },
    #   打开windows计算器
    { disable = true, coordinate = [5, 0], hint = "危险操作", size = "17px", icon = "fa fa-bomb", evil = "() => this.utils.Package.ChildProcess.exec('cmd /C calc')" },
    #   打开网址
    { disable = true, coordinate = [5, 1], hint = "危险操作", size = "17px", icon = "fa fa-bomb", evil = "() => this.utils.openUrl('https://github.com/obgnail/typora_plugin')" },
]


############### autoTrailingWhiteSpace ###############
# 此插件是为了满足Markdown换行语法，除非有特殊需求，否则不建议开启此插件
# 参考：https://markdown.com.cn/basic-syntax/line-breaks.html
[autoTrailingWhiteSpace]
# 右键菜单中展示的名称
name = "自动添加结尾空格"
# 是否启用此自定义插件
enable = false
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[autoTrailingWhiteSpace.config]
# 快捷键
hotkey = ""


############### redirectLocalRootUrl ###############
[redirectLocalRootUrl]
# 右键菜单中展示的名称
name = "重定向本地资源根目录"
# 是否启用此自定义插件
# 【metaNode的typora-root-url参数】的优先级大于【此插件】。也就是说，若文件显式设置了typora-root-url，那么此插件在该文件失效
enable = false
# 是否在右键菜单中隐藏
hide = true
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[redirectLocalRootUrl.config]
# 资源根目录，支持绝对路径(如D:\\tmp\\img)和相对路径(如.\\assets)，填写时请注意转义反斜线（若为空，则此插件失效）
root = "./"
# 过滤的正则表达式：只有文件路径命中filter_regexp匹配的文件才使用此插件（若为空，则全部文件都使用此插件）
filter_regexp = ""


############### openInTotalCommander ###############
[openInTotalCommander]
# 右键菜单中展示的名称
name = "TC打开"
# 是否启用此自定义插件
# 若要使用此插件，请先修改tc_path选项
enable = false
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[openInTotalCommander.config]
# 快捷键
hotkey = ""
# tc路径
tc_path = "D:\\software\\TotalCMD_64bit_10.52\\TOTALCMD64.EXE"
# tc命令参数（参考：https://www.ghisler.ch/wiki/index.php/Command_line_parameters）
# 提供内置环境变量:
#   1. $f: 当前文件路径
#   2. $d: 当前文件所属目录
#   3. $m: 当前挂载目录（侧边栏的根目录）
tc_args = '/O /T /P=L  /L="$f"'


############### pluginUpdater ###############
[pluginUpdater]
# 右键菜单中展示的名称
name = "升级插件"
# 是否启用此自定义插件
# 注意：此插件目前仅支持windows系统，若为其他系统，则此插件失效
# 注意：此插件依赖于commander插件，若禁用了commander，则此插件失效
enable = true
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面）
order = 1
# 插件配置
[pluginUpdater.config]
# 众所周知，有些地区无法裸连github，需要使用代理（如：http://127.0.0.1:7890）
# 若值为空，则将弹出窗口，让用户填入代理；若有值，则将直接使用此代理，不再弹出窗口（除非你固定使用某代理，否则不建议使用此配置）
proxy = ""
# 升级时是否弹窗
#   1.always: 总是弹出（等待程序执行完毕后一次性弹出）
#   2.error:  只在异常时弹出
#   3.silent: 总是静默
#   4.echo:   立即回显
exec_show = "echo"
# 是否启用自动静默升级（若为false，则以下配置全部失效）
# 自动升级有两个策略：
#   1.策略一：打开Typora一段时间后，开始执行升级流程
#   2.策略二：每隔一段时间，执行一次升级流程
auto_update = true
# 策略一（单位：ms，若<0，则不使用此策略）
start_update_interval = 300000   # (1000 * 60 * 5)
# 策略二（单位：ms，若<0，则不使用此策略）
update_loop_interval = -1
# 自动升级时使用的回显方式（可选项和exec_show相同）
auto_exec_show = "silent"